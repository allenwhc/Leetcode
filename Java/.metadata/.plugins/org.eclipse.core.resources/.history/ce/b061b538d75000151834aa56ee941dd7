
public class Solution {
	public static class TreeNode{
		int val;
		TreeNode left;
		TreeNode right;
		public TreeNode(int x) {
			val=x;
		}
			
		public static TreeNode newNode(int val){
			TreeNode node=new TreeNode(val);
			node.left=null;
			node.right=null;
			return node;
		}
			
		public static void printBinaryTree(TreeNode root, int level){
		    if(root==null)
		         return;
		    printBinaryTree(root.right, level+1);
		    if(level!=0){
		        for(int i=0;i<level-1;i++)
		            System.out.print("|\t");
		            System.out.println("|-------"+root.val);
		    }
		    else
		        System.out.println(root.val);
		    printBinaryTree(root.left, level+1);
		}   
	}
	
	//Closest BST value I
	public static int closestValue(TreeNode root, double target){
		if(root==null) return 0;
		double diff=Integer.MAX_VALUE;
		int[] closestNodeValue=new int[1];
		findClosest(root, target, diff, closestNodeValue);
		return closestNodeValue[0];
	}
	
	private static void findClosest(TreeNode node, double target, double diff, int[] closest){
		if(node==null) return;
		if(Math.abs(target-(double)node.val)<=diff){
			diff=Math.abs(target-(double)node.val);
			closest[0]=node.val;
		}
		findClosest(node.left, target, diff, closest);
		findClosest(node.right, target, diff, closest);
	}
	
	public static void main(String[] args){
		TreeNode root=new TreeNode(7);
		root.left=new TreeNode(3);
		root.right=new TreeNode(11);
		root.left.left=new TreeNode(1);
		root.left.right=new TreeNode(5);
		root.right.left=new TreeNode(9);
		root.right.right=new TreeNode(13);
		
		TreeNode.printBinaryTree(root, 0);
		double target=5.97;
		System.out.println("The closest node value to "+target+" is: "+closestValue(root, target));
	}
}
