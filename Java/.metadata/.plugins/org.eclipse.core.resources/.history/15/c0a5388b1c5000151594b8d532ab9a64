import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Solution {
	//Populate next right pointer I
	public static void connect(TreeLinkNode root){
		if(root==null ||(root.left==null && root.right==null)) return;
		for(int i=1; i<=treeHeight(root); i++){
			List<TreeLinkNode> level=new LinkedList<>();
			levelOrderTraverse(root, level, i);
			
		}
	}
	
	private static int treeHeight(TreeLinkNode node){
		if(node==null) return 0;
		return Math.max(treeHeight(node.left), treeHeight(node.right))+1;
	}
	
	private static void levelOrderTraverse(TreeLinkNode node, List<TreeLinkNode> level, int step){
		if(node==null) return;
		if(step==1){
			level.add(node);
			return;
		}
		levelOrderTraverse(node.left, level, step-1);
		levelOrderTraverse(node.right, level, step-1);
	}
	
	public static void printNextPointer(TreeLinkNode node){
		if(node==null) return;
		System.out.print("The next node of "+node.val+" is ");
		if(node.next==null)
			System.out.println("null");
		else
			System.out.println(node.next.val);
		printNextPointer(node.left);
		printNextPointer(node.right);
	}
	
	public static void main(String[] args){
		TreeLinkNode root=new TreeLinkNode(1);
		root.left=new TreeLinkNode(2);
		root.right=new TreeLinkNode(3);
		root.left.left=new TreeLinkNode(4);
		root.left.right=new TreeLinkNode(5);
		root.right.left=new TreeLinkNode(6);
		root.right.right=new TreeLinkNode(7);
		connect(root);
		printNextPointer(root);
	}
}
