import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;

public class Solution {
	public static String alienOrder(String[] words) {
        int n=words.length;
        if(n==0) return "";
        
        //Count number of distinct alphabets
        List<Character> alphabets=new ArrayList<>();
        for(int i=0; i<n; i++){
        	String word=words[i];
        	for(int j=0; j<word.length(); j++){
        		if(!alphabets.contains(word.charAt(j)))
        			alphabets.add(word.charAt(j));
        	}
        }
        
        int size=alphabets.size();
        HashMap<Character, Integer> map=new HashMap<>();
        for(int i=0; i<size; i++)
        	map.put(alphabets.get(i), i);
//        for(Character key:map.keySet())
//        	System.out.println(key+":"+map.get(key));
        //Create an empty graph
        List<List<Integer>> adjacentList=new ArrayList<List<Integer>>();
        for(int i=0; i<size; i++)
        	adjacentList.add(new ArrayList<Integer>());
        
        //Compare two adjacent words in words
        for(int i=0; i<n-1; i++){
        	String word1=words[i];
        	String word2=words[i+1];
        	for(int j=0; j<Math.min(word1.length(), word2.length()); j++){
        		char c1=word1.charAt(j);
        		char c2=word2.charAt(j);
        		if(c1!=c2){
        			adjacentList.get(map.get(c1)).add(c2-'a');
        			break;
        		}
        	}
        }
        Stack<Integer> stack=new Stack<>();
        topologicalSort(stack, adjacentList);
        
        for(List<Integer> l:adjacentList)
       	 System.out.println(Arrays.deepToString(l.toArray()));
        StringBuffer order=new StringBuffer();
        while(!stack.isEmpty())
        	order.append(Character.toLowerCase(stack.pop()));
        return order.toString();
    }
	
	private static void topologicalSort(Stack<Integer> stack, List<List<Integer>> adjacentList){
		int n=adjacentList.size();
		boolean[] visited=new boolean[n];
		for(int i=0; i<n; i++)
			if(!visited[i])
				sortUntil(stack, adjacentList, i, visited);
	}
	
	private static void sortUntil(Stack<Integer> stack, List<List<Integer>> adjacentList, int v, boolean[] visited){
		visited[v]=true;
		for(List<Integer> l:adjacentList)
			for(Integer i:l){
				if(!visited[i])
					sortUntil(stack, adjacentList, i, visited);
			}
		stack.push(v);
	}
	
	
	public static void main(String[] args) {
		String[] words={"baa", "abcd", "abca", "cab", "cad"};
	//	String[] words={"wrt","wrf","er","ett","rftt"};
		System.out.println("Given sequence of words is: "+Arrays.toString(words));
		System.out.println("The dictionary is: "+alienOrder(words));
	}
}
